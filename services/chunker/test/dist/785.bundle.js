"use strict";(self.webpackChunkMusicMetadataLib=self.webpackChunkMusicMetadataLib||[]).push([[785],{785:(e,t,a)=>{a.r(t),a.d(t,{AmrParser:()=>f});var i=a(604),s=a(17),r=a(833),n=a(185);const o={len:1,get:(e,t)=>({frameType:(0,n.f5)(e,t,1,4)})},m=r("music-metadata:parser:AMR"),d=[12,13,15,17,19,20,26,31,5,0,0,0,0,0,0,0];class f extends i.s{async parse(){if("#!AMR"!==await this.tokenizer.readToken(new s.AnsiStringType(5)))throw new Error("Invalid AMR file: invalid MAGIC number");this.metadata.setFormat("container","AMR"),this.metadata.setFormat("codec","AMR"),this.metadata.setFormat("sampleRate",8e3),this.metadata.setFormat("bitrate",64e3),this.metadata.setFormat("numberOfChannels",1);let e=0,t=0;const a=this.tokenizer.fileInfo?.size??Number.MAX_SAFE_INTEGER;if(this.options.duration){for(;this.tokenizer.position<a;){const i=await this.tokenizer.readToken(o),s=d[i.frameType];if(s>0){if(e+=s+1,e>a)break;await this.tokenizer.ignore(s),++t}else m(`Found no-data frame, frame-type: ${i.frameType}. Skipping`)}this.metadata.setFormat("duration",.02*t)}}}}}]);